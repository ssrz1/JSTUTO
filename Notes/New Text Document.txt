important javaScript notes	

Read It -> *  https://medium.com/dailyjs/i-never-understood-javascript-closures-9663703368e8


	JS run on JS Engine which every browser has have such as chrome v8 for chrome.
	Inside an JS engine we have thing called Parser read codes line by line (knows JS rules and known how it should be written in order tobe correct)
	If everything is correct it make Abstract Syntax Tree which convert into Machine Code.

Execution Context:
	
	When we execute a FUNCTION we create brand new "Execution Context"

	A container which stores variables and in which a piece of our code is evaluated and executed.
	By Default is Global Execution context i.e it is associated with global object
	In browser thats the Window object.
	
	Execution context works in a form of execution stacks. 

Execution context contain three things
	1. Variable Objects -> Conatian fucntion argument, variable declartion ,function declation
	2. Scope chain -> variable objects as well as all its parents
	3. .this

JS Hoisting:
	Its a JS default bevaiour.
	koi bhe ap variable declaration kartay hein code mey neechay aur ap use usay uper kar rahay hein
	tou yei kaam ap kar sktay hein because JS use declartion ko utha k top pay lay ayeiga automatically
		1. moving declaration to the top.
		2. In JS a variable can be used before it has been declared.
	NOTE: Initiliazation pay hoisted work nahe karta sirf Declaration pay waqt karta hai.
	var y=7; //Initilaized   	var y; // Declared
	value nahe day sktay haan agar declare use karnay k baad karo tou wo chalay ga aur usay hoisting khatay hein.

JS Scoping:
	Lexical Scoping:
		one function which is lexically in another function which means it is written inside another function.
		get access to its outer parent function.

Variable envioroment=== local memory

CallBacks:
	Passing a function as a parameter(Input).

Higher Order Functions:
	Are those functions that takes in another function as a Parameter(CallBAcks) or Return out as a function.
	Also callbacks and higher order function allows us to run asynchronus code. 


/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*
//Higher Oder Function && Clousre EXMAPLE

Closure:
	because when ananymous fuction created here it also retains the value of factor.

function multiplier(factor){
	return function(x) {
		return x * factor;
	}
}




let doubler = mutilpier(2);
let tripler = multiplier(3);

doubler(4)
-> 8
tripler(4)
-> 12

/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*


Objects:
	"Everything in JS is an object". well its mostly true but not 100% correct since in JS we have 2 things one 
	is primitive and other is Object.
Primitive:
	1.Numbers
	2.Strings
	3.Booleans
	4.Undefined
	5.Null
Most primitive types has object wrapper which is an object which allows then to inheritallay use methods which is PROTOTYPEICALLY asscoiated with them.
OBjects:
	Arrays
	Functions
	Objects
	Date
	wrappers for number string and boolens these all are OBJECTS.

	 { lets say we do something like 42.toString()
		-> it will give error we cannot access toString method or any other method for a fact because these
	42 is a PRIMITIVE TYPE and these DONOT have methods associated with them(prototypes). so we will use Wrapper to access 
	if we something like 
	const num = 42    //and NOW we would like to convert into toString
	-> num.toString()
	we can do it and now OUTPUT will be 
	-> "42"
		

}

Constructor or Prototype are also called Classes in other language. we can create many instance we want.

JS is a protype based language which means inheritance works by something called protypes which means each and every JS object has an prototype property
 
Objects, Prototypes and prototype chain:

	* Every JavaScript object has a PROTOTYPE PROPERTY, which makes inheritance possible inJS
	* The prototype property of an object is where we put methods and properties that we want 
	  OTHER OBJECTS INHERIT.
	* The constructor property is NOT the prototype of the constructor itself, its the protoype of ALL instances that are created through it.
	* When a certain method is called the search starts in the object itself and if it cannot be found the search moves on to the objects prototyes.
	  This continues until the method is found: PROTOYPE CHAIN.

FUNCTIONS:
	A function is an Instance of an Object type. so it behaves like any other OBJECT.
	-> We can store Function in a variable.
	-> Also we can pass a function as an argument to another function.
	-> We can also return a function from a function.
Note: In callBack function we dont pass with parenthesis() but instead without parantheises.

Immediately Invoked Fuction Expression IIFE:

	* A function Expression that gets invoked immediately.
	* Creates Closure
	* Doesnt add or modify global objects.





(watch hard parts video 4)
Closure:
	When we return fuction from a function.
	In JS only propety of function is differnt from an object that it can be invoke.




Asynchronous JavaScript:
	JS is single threaded(one command executing at a time) and has synchronus execution model.
	So what if we need to wait some time before we can execute?
	delay some code execution but not wanting to block the thread?
What do we do? let see 2 examples
	 
	-> In what order will our console log occurs?
	
	function printHello(){
		console.log("HELLO");

	}
	
	setTimeout(printHello,1000);
	console.log("Me First")
//NO BLOCKING?
 	 
in this case "Me First" happend first and in theory atleast 1000secs later printHello happpens. its not blocking but our current JS model is not explaining about this system yet.

	2nd Example
 	-> In what order will our console log occurs?
	
	function printHello(){
		console.log("HELLO");

	}
	
	setTimeout(printHello,0);
	console.log("Me First")

Ans: Even in this situation printHello will come after "Me first". So our previous model of JS execution is insufficient.
	We need to introduce 3 new components of our platform.
	- Thread of execution.
	-Memory/variable enviroment.
	-Call Stack.
Adding:
	-Web Browser APIs/Node background threads.
	-Callbacks/Message/Task queue
	-Event loop

Turnary operator:
 condition ? () : ()
//^ aik condition hoge agar wo true hai tou phala bracket execute hojae warna ager wo FALSE hai tou dosra bracket execute hojayei

